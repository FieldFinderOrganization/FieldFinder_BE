package com.example.FieldFinder.ai;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.github.cdimascio.dotenv.Dotenv;
import okhttp3.*;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.*;

@Component
public class AIChat {

    private static final String OPENROUTER_API_KEY;
    private static final String OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
    private static final String MODEL_NAME = "mistralai/mistral-7b-instruct"; // ho·∫∑c llama-3...

    private final OkHttpClient client = new OkHttpClient();
    private final ObjectMapper mapper = new ObjectMapper();

    private static final long MIN_INTERVAL_BETWEEN_CALLS_MS = 1100;
    private long lastCallTime = 0;

    static {
        Dotenv dotenv = Dotenv.load();
        OPENROUTER_API_KEY = dotenv.get("OPENROUTER_API_KEY");
        if (OPENROUTER_API_KEY == null || OPENROUTER_API_KEY.isEmpty()) {
            throw new RuntimeException("OPENROUTER_API_KEY is not set in environment variables");
        }
    }

    private synchronized void waitIfNeeded() throws InterruptedException {
        long now = System.currentTimeMillis();
        long waitTime = MIN_INTERVAL_BETWEEN_CALLS_MS - (now - lastCallTime);
        if (waitTime > 0) {
            Thread.sleep(waitTime);
        }
        lastCallTime = System.currentTimeMillis();
    }

    public BookingQuery parseBookingInput(String userInput) throws IOException, InterruptedException {
        String prompt = buildPrompt(userInput);

        String requestBody = mapper.writeValueAsString(Map.of(
                "model", MODEL_NAME,
                "messages", List.of(
                        Map.of("role", "system", "content", SYSTEM_INSTRUCTION),
                        Map.of("role", "user", "content", prompt)
                ),
                "temperature", 0.3,
                "max_tokens", 200
        ));

        Request request = new Request.Builder()
                .url(OPENROUTER_API_URL)
                .addHeader("Authorization", "Bearer " + OPENROUTER_API_KEY)
                .addHeader("Content-Type", "application/json")
                .addHeader("HTTP-Referer", "https://yourdomain.com") // Tu·ª≥ ch·ªçn
                .addHeader("User-Agent", "FieldFinderApp/1.0")       // B·∫ÆT BU·ªòC
                .post(RequestBody.create(requestBody, MediaType.parse("application/json")))
                .build();

        waitIfNeeded();

        try (Response response = client.newCall(request).execute()) {
            if (response.isSuccessful()) {
                String responseBody = response.body().string();
                JsonNode root = mapper.readTree(responseBody);
                String content = root.at("/choices/0/message/content").asText();

                String cleanJson = content.replaceAll("```json", "").replaceAll("```", "").trim();
                return mapper.readValue(cleanJson, BookingQuery.class);
            } else {
                throw new IOException("OpenRouter API error: " + response.code() + " - " + response.message());
            }
        }
    }

    private String buildPrompt(String userInput) {
        return """
                Ph√¢n t√≠ch y√™u c·∫ßu ƒë·∫∑t s√¢n sau v√† tr·∫£ v·ªÅ th√¥ng tin ng√†y v√† c√°c slot t∆∞∆°ng ·ª©ng:
                "%s"
                """.formatted(userInput);
    }

    private static final String SYSTEM_INSTRUCTION = """
B·∫°n l√† tr·ª£ l√Ω AI chuy√™n x·ª≠ l√Ω ƒë·∫∑t s√¢n th·ªÉ thao. H√£y tr√≠ch xu·∫•t ng√†y, kho·∫£ng th·ªùi gian ƒë·∫∑t s√¢n, v√† lo·∫°i s√¢n t·ª´ y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng JSON **THU·∫¶N** v·ªõi ƒë·ªãnh d·∫°ng sau:

{
  "bookingDate": "yyyy-MM-dd",
  "slotList": [danh_s√°ch_s·ªë_slot],
  "pitchType": "FIVE_A_SIDE" | "SEVEN_A_SIDE" | "ELEVEN_A_SIDE" | null
}

‚ùóÔ∏èL∆∞u √Ω quan tr·ªçng:
- `bookingDate`: l√† chu·ªói ƒë·ªãnh d·∫°ng "yyyy-MM-dd"
- `slotList`: l√† M·∫¢NG G·ªíM C√ÅC S·ªê NGUY√äN. Kh√¥ng bao g·ªìm ƒë·ªëi t∆∞·ª£ng JSON n√†o trong m·∫£ng n√†y.
- `pitchType`: l√† m·ªôt trong c√°c chu·ªói sau:
  - "FIVE_A_SIDE" n·∫øu ng∆∞·ªùi d√πng n√≥i "s√¢n 5", "s√¢n 5 ng∆∞·ªùi", "s√¢n nh·ªè", "s√¢n mini"
  - "SEVEN_A_SIDE" n·∫øu ng∆∞·ªùi d√πng n√≥i "s√¢n 7", "s√¢n 7 ng∆∞·ªùi", "s√¢n trung"
  - "ELEVEN_A_SIDE" n·∫øu ng∆∞·ªùi d√πng n√≥i "s√¢n 11", "s√¢n 11 ng∆∞·ªùi", "s√¢n l·ªõn"
  - null n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c

‚ö†Ô∏è C√°c slot ƒë∆∞·ª£c quy ƒë·ªãnh nh∆∞ sau:
- Slot 1: 6h - 7h
- Slot 2: 7h - 8h
- Slot 3: 8h - 9h
- Slot 4: 9h - 10h
- Slot 5 : 10h - 11h
- Slot 6: 11h - 12h
- Slot 7: 12h - 13h
- Slot 8: 13h - 14h
- Slot 9: 14h - 15h
- Slot 10: 15h - 16h
- Slot 11: 16h - 17h
- Slot 12: 17h - 18h
- Slot 13: 18h - 19h
- Slot 14: 19h - 20h
- Slot 15: 20h - 21h
- Slot 16: 21h - 22h
- Slot 17: 22h - 23h
- Slot 18: 23h - 24h

üïí QUY T·∫ÆC X·ª¨ L√ù GI·ªú:
1. Hi·ªÉu c√°c c·ª•m t·ª´ t·ª± nhi√™n nh∆∞ "s√°ng", "chi·ªÅu", "t·ªëi":
   - "6h s√°ng" ‚Üí 6:00 ‚Üí slot 1
   - "1h chi·ªÅu" ho·∫∑c "13h" ‚Üí 13:00 ‚Üí slot 8
   - "6h t·ªëi" ho·∫∑c "18h" ‚Üí 18:00 ‚Üí slot 13
2. N·∫øu ng∆∞·ªùi d√πng kh√¥ng ghi r√µ bu·ªïi (s√°ng/chi·ªÅu/t·ªëi), x·ª≠ l√Ω theo ng·ªØ c·∫£nh th√¥ng th∆∞·ªùng:
   - Gi·ªù t·ª´ 1h ƒë·∫øn 5h m·∫∑c ƒë·ªãnh l√† chi·ªÅu ‚Üí c·ªông th√™m 12 gi·ªù
   - Gi·ªù t·ª´ 6h ƒë·∫øn 11h m·∫∑c ƒë·ªãnh l√† s√°ng
   - Gi·ªù t·ª´ 7h t·ªëi tr·ªü ƒëi hi·ªÉu l√† bu·ªïi t·ªëi (19h+)

üìÖ QUY T·∫ÆC X·ª¨ L√ù NG√ÄY:
- N·∫øu ng∆∞·ªùi d√πng ghi "h√¥m nay", s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i (v√≠ d·ª•: "2025-05-29")
- N·∫øu ghi "ng√†y mai", c·ªông th√™m 1 ng√†y
- N·∫øu ghi "ng√†y kia", c·ªông th√™m 2 ng√†y
- N·∫øu c√≥ ng√†y c·ª• th·ªÉ nh∆∞ "20/5", chuy·ªÉn v·ªÅ ƒë·ªãnh d·∫°ng yyyy-MM-dd

üí° N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng√†y ho·∫∑c gi·ªù h·ª£p l·ªá, tr·∫£ v·ªÅ slotList r·ªóng v√† bookingDate l√† null ho·∫∑c r·ªóng. N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i s√¢n th√¨ pitchType l√† null.

üéØ Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn. Kh√¥ng k√®m theo b·∫•t k·ª≥ gi·∫£i th√≠ch, markdown, ho·∫∑c k√Ω t·ª± kh√°c.

üìå V√≠ d·ª•:
- Input: "T√¥i c·∫ßn ƒë·∫∑t s√¢n v√†o ng√†y mai l√∫c 6h t·ªëi"
- Output: {"bookingDate": "2025-05-30", "slotList": [13], "pitchType": null}

- Input: "ƒê·∫∑t s√¢n h√¥m nay t·ª´ 1h ƒë·∫øn 2h chi·ªÅu"
- Output: {"bookingDate": "2025-05-29", "slotList": [8], "pitchType": null}

- Input: "T√¥i mu·ªën ƒë·∫∑t s√¢n v√†o ng√†y kia t·ª´ 8h s√°ng t·ªõi 10h s√°ng"
- Output: {"bookingDate": "2025-05-31", "slotList": [3, 4], "pitchType": null}

- Input: "Cho t√¥i ƒë·∫∑t s√¢n 5 l√∫c 6h-7h h√¥m nay"
- Output: {"bookingDate": "2025-05-29", "slotList": [1], "pitchType": "FIVE_A_SIDE"}

- Input: "T√¥i mu·ªën ƒë·∫∑t s√¢n l·ªõn v√†o ng√†y mai t·ª´ 19h ƒë·∫øn 21h"
- Output: {"bookingDate": "2025-05-30", "slotList": [14,15], "pitchType": "ELEVEN_A_SIDE"}

- Input: "ƒê·∫∑t s√¢n l√∫c 9h h√¥m nay"
- Output: {"bookingDate": "2025-05-29", "slotList": [4], "pitchType": null}
""";




    public static class BookingQuery {
        public String bookingDate;
        public List<Integer> slotList;
        public String pitchType;

        @Override
        public String toString() {
            return "BookingQuery{" +
                    "bookingDate='" + bookingDate + '\'' +
                    ", slotList=" + slotList +
                    ", pitchType='" + pitchType + '\'' +
                    '}';
        }
    }
}
